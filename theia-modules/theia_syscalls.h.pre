IFNDEF __THEIA_SYSCALLS__
DEFINE __THEIA_SYSCALLS__
#include <linux/version.h>

#if defined(CONFIG_X86_64) && (LINUX_VERSION_CODE >= KERNEL_VERSION(4,17,0))
#define PTREGS_SYSCALL_STUBS 1
#endif

#ifdef PTREGS_SYSCALL_STUBS
#define PTREGS_CHK_PROTO(...) struct pt_regs *regs
#define PTREGS_CHK_ARGS(...) regs
#else
#define PTREGS_CHK_PROTO(...) __VA_ARGS__
#define PTREGS_CHK_ARGS(...) __VA_ARGS__
#endif

#define TP_FIELDS(...)
#define sc_exit(...)
#define TP_PROTO(...) __VA_ARGS__
#define TP_ARGS(...) __VA_ARGS__

IFDEF _THEIA_HOOK_H
extern struct ftrace_hook theia_hooks[];
extern const size_t nr_theia_hooks;
void init_extra_syscalls(void);
ENDIF

/*
gcc -Wall -E -xc theia_hook_test.h.pre \
| sed -e $'s/__NL__/\\\n/g' \
| sed -e 's/DEFINE/#define/g' \
| grep -v '^# ' \
> theia_hook_test.h
 */

#define SC_LTTNG_TRACEPOINT_EVENT(_name, _proto, _args, _fields) \
DEFINE SC_PROTO_##_name PTREGS_CHK_PROTO(_proto) __NL__\
DEFINE SC_ARGS_##_name PTREGS_CHK_ARGS(_args) __NL__\
typedef asmlinkage long (*ptr_sys_##_name)(SC_PROTO_##_name); __NL__\
extern ptr_sys_##_name real_sys_##_name; __NL__\
extern asmlinkage long theia_hook_##_name(SC_PROTO_##_name);

/*
 * each declaration of theia_hook_##_name must be defined.
 */
PRAGMA GCC diagnostic push
PRAGMA GCC diagnostic error "-Wunused-function"

SC_LTTNG_TRACEPOINT_EVENT(clone,
	TP_PROTO(sc_exit(long ret,) unsigned long clone_flags, unsigned long newsp,
		void __user *parent_tid,
		void __user *child_tid,
        struct pt_regs *regs),
	TP_ARGS(sc_exit(ret,) clone_flags, newsp, parent_tid, child_tid, regs),
	TP_FIELDS(
		sc_exit(ctf_integer(long, ret, ret))
		sc_in(ctf_integer_hex(unsigned long, clone_flags, clone_flags))
		sc_in(ctf_integer_hex(unsigned long, newsp, newsp))
		sc_in(ctf_integer_hex(void *, parent_tid, parent_tid))
		sc_in(ctf_integer_hex(void *, child_tid, child_tid))
	)
)

SC_LTTNG_TRACEPOINT_EVENT(execve,
	TP_PROTO(sc_exit(long ret,) const char *filename, char *const *argv, char *const *envp, struct pt_regs *regs),
	TP_ARGS(sc_exit(ret,) filename, argv, envp, regs),
	TP_FIELDS(sc_exit(ctf_integer(long, ret, ret))
		sc_in(ctf_user_string(filename, filename))
		sc_in(ctf_integer_hex(char *const *, argv, argv))
		sc_in(ctf_integer_hex(char *const *, envp, envp))
	)
)

SC_LTTNG_TRACEPOINT_EVENT(read,
	TP_PROTO(sc_exit(long ret,) unsigned int fd, char * buf, size_t count),
	TP_ARGS(sc_exit(ret,) fd, buf, count),
	TP_FIELDS(sc_exit(ctf_integer(long, ret, ret)) sc_in(ctf_integer(unsigned int, fd, fd)) sc_out(ctf_integer(char *, buf, buf)) sc_in(ctf_integer(size_t, count, count)))
)

SC_LTTNG_TRACEPOINT_EVENT(write,
	TP_PROTO(sc_exit(long ret,) unsigned int fd, const char * buf, size_t count),
	TP_ARGS(sc_exit(ret,) fd, buf, count),
	TP_FIELDS(sc_exit(ctf_integer(long, ret, ret)) sc_in(ctf_integer(unsigned int, fd, fd)) sc_in(ctf_integer(const char *, buf, buf)) sc_in(ctf_integer(size_t, count, count)))
)

SC_LTTNG_TRACEPOINT_EVENT(exit_group,
    TP_PROTO(sc_exit(long ret,) int error_code),
    TP_ARGS(sc_exit(ret,) error_code),
    TP_FIELDS(sc_exit(ctf_integer(long, ret, ret)) sc_in(ctf_integer(int, error_code, error_code)))
)

SC_LTTNG_TRACEPOINT_EVENT(exit,
    TP_PROTO(sc_exit(long ret,) int error_code),
    TP_ARGS(sc_exit(ret,) error_code),
    TP_FIELDS(sc_exit(ctf_integer(long, ret, ret)) sc_in(ctf_integer(int, error_code, error_code)))
)

SC_LTTNG_TRACEPOINT_EVENT(link,
    TP_PROTO(sc_exit(long ret,) const char * oldname, const char * newname),
    TP_ARGS(sc_exit(ret,) oldname, newname),
    TP_FIELDS(sc_exit(ctf_integer(long, ret, ret)) sc_in(ctf_user_string(oldname, oldname)) sc_in(ctf_user_string(newname, newname)))
)

SC_LTTNG_TRACEPOINT_EVENT(pread64,
    TP_PROTO(sc_exit(long ret,) unsigned int fd, char * buf, size_t count, loff_t pos),
    TP_ARGS(sc_exit(ret,) fd, buf, count, pos),
    TP_FIELDS(sc_exit(ctf_integer(long, ret, ret)) sc_in(ctf_integer(unsigned int, fd, fd)) sc_out(ctf_integer(char *, buf, buf)) sc_in(ctf_integer(size_t, count, count)) sc_in(ctf_integer(loff_t, pos, pos)))
)

SC_LTTNG_TRACEPOINT_EVENT(close,
    TP_PROTO(sc_exit(long ret,) unsigned int fd),
    TP_ARGS(sc_exit(ret,) fd),
    TP_FIELDS(sc_exit(ctf_integer(long, ret, ret)) sc_in(ctf_integer(unsigned int, fd, fd)))
)

SC_LTTNG_TRACEPOINT_EVENT(open,
    TP_PROTO(sc_exit(long ret,) const char * filename, int flags, umode_t mode),
    TP_ARGS(sc_exit(ret,) filename, flags, mode),
    TP_FIELDS(sc_exit(ctf_integer(long, ret, ret)) sc_in(ctf_user_string(filename, filename)) sc_in(ctf_integer(int, flags, flags)) sc_in(ctf_integer(umode_t, mode, mode)))
)

SC_LTTNG_TRACEPOINT_EVENT(newstat,
    TP_PROTO(sc_exit(long ret,) const char * filename, struct stat * statbuf),
    TP_ARGS(sc_exit(ret,) filename, statbuf),
    TP_FIELDS(sc_exit(ctf_integer(long, ret, ret)) sc_in(ctf_user_string(filename, filename)) sc_out(ctf_integer(struct stat *, statbuf, statbuf)))
)

SC_LTTNG_TRACEPOINT_EVENT(fchmod,
    TP_PROTO(sc_exit(long ret,) unsigned int fd, umode_t mode),
    TP_ARGS(sc_exit(ret,) fd, mode),
    TP_FIELDS(sc_exit(ctf_integer(long, ret, ret)) sc_in(ctf_integer(unsigned int, fd, fd)) sc_in(ctf_integer(umode_t, mode, mode)))
)

SC_LTTNG_TRACEPOINT_EVENT(sync,
    TP_PROTO(sc_exit(long ret,) void),
    TP_ARGS(sc_exit(ret)),
    TP_FIELDS(sc_exit(ctf_integer(long, ret, ret)))
)

SC_LTTNG_TRACEPOINT_EVENT(chdir,
	TP_PROTO(sc_exit(long ret,) const char * filename),
	TP_ARGS(sc_exit(ret,) filename),
	TP_FIELDS(sc_exit(ctf_integer(long, ret, ret)) sc_in(ctf_user_string(filename, filename)))
)

PRAGMA GCC diagnostic pop
ENDIF
